// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/subscriptions": {
            "get": {
                "description": "Возвращает все подписки",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Получить список всех подписок",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "Возвращает поля записи",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Создать новую запись о подписке",
                "parameters": [
                    {
                        "description": "Данные для внесения",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/postgre.RequestFields"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/subscriptions/range-price": {
            "post": {
                "description": "Подсчитывает общую стоимость подписок по start_date, end_date, service_name, user_id. service_name и user_id можно передать пустыми.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Получить общую стоимость подписок за период",
                "parameters": [
                    {
                        "description": "фильтры для рассчета",
                        "name": "subscription_filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RangeRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.RangeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/subscriptions/{service_name}/{user_id}": {
            "get": {
                "description": "Возвращает информацию о подписке по service_name и user_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Получить информацию о подписке",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Имя сервиса",
                        "name": "service_name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UUID пользователя",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "description": "Возвращает информацию о подписке по service_name и user_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Изменить информацию о подписке",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Имя подписки изменяемой записи",
                        "name": "service_name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UUID пользователя изменяемой записи",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Новая информация о подписке",
                        "name": "newFields",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/postgre.RequestUpdateFields"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет запись по service_name и user_id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Удалить запись о подписке",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Имя сервися",
                        "name": "service_name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UUID пользователя",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.ListResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "subscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/postgre.RequestFields"
                    }
                }
            }
        },
        "handlers.RangeRequestBody": {
            "type": "object",
            "properties": {
                "end_date": {
                    "type": "string",
                    "example": "2025-12-31T00:00:00Z"
                },
                "service_name": {
                    "type": "string",
                    "example": "Google"
                },
                "start_date": {
                    "type": "string",
                    "example": "2025-01-01T00:00:00Z"
                },
                "user_id": {
                    "type": "string",
                    "example": "b1d4c0ec-9a4a-4e3a-9fdd-5e27d0be16fa"
                }
            }
        },
        "handlers.RangeResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "postgre.RequestFields": {
            "type": "object",
            "properties": {
                "end_date": {
                    "type": "string",
                    "example": "2025-12-31T00:00:00Z"
                },
                "price": {
                    "type": "integer",
                    "example": 100
                },
                "service_name": {
                    "type": "string",
                    "example": "Google"
                },
                "start_date": {
                    "type": "string",
                    "example": "2025-01-01T00:00:00Z"
                },
                "user_id": {
                    "type": "string",
                    "example": "b1d4c0ec-9a4a-4e3a-9fdd-5e27d0be16fa"
                }
            }
        },
        "postgre.RequestUpdateFields": {
            "type": "object",
            "properties": {
                "end_date": {
                    "type": "string",
                    "example": "2025-12-31T00:00:00Z"
                },
                "price": {
                    "type": "integer",
                    "example": 100
                },
                "start_date": {
                    "type": "string",
                    "example": "2025-01-01T00:00:00Z"
                }
            }
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "fields": {
                    "$ref": "#/definitions/postgre.RequestFields"
                },
                "fieldsUpd": {
                    "$ref": "#/definitions/postgre.RequestUpdateFields"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
